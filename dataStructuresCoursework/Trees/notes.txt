Trees:
  Unlike Arrays, Linked List, Stacks / Queues. Which are linear data structures. Trees are Heirarchial data structures.

Vocab: The topmost node of the tree is referred to as the root. The elements that are under the root are known as the children. The element directly
above a node is known as the parent. Elements with know children are known as leaves.

** leaf nodes are the last level of a tree that are the terminating level because they are pointing to NULL
ex) the root node = level 0
    Children of root node = level 1
    children of the children of root node = level 2
    etc. until we get to the terminating leaves
Why do we use trees?
1. Might want to store things in that are naturally hierarchy,
  EX_ computer file storage
2. Sometimes trees are actually faster in terms of run time than other data structures
3. Same goes for insertion and deletion of information compared to linked list and arrays
4. Like linked lists and unlike arrays, theres no upper bound to how big the tree can be

Main Application Of trees

1. Manipulate Heirarchial data
2. Make information easy to search
3. Manipluate sorted lists of data
4. As a workflow of compositing digital images for studio effects
5. router algorithms
6. form multi-stage decision making (see business chess)

Binary Tree:
  A tree whose elements have at MAX 2 children is called a binary tree. We typically name them, left and right child.
Types of binary trees:
  Full Binary Tree: in which all nodes except the leaves have at least 2 children.
    In a full binary, the number of leaf nodes is equal too the number of internal nodes + 1;
      L = i + 1 ,  Where L is the number of leaf nodes and, i , is the number of internal nodes.
  Complete Binary Tree: in which ALL LEVELS of the tree are balanced, every internal node has 2 children. Except the last level, if it is not Complete
  the tree will be filled from the leftmost first.

  Perfect Binary Tree: in which all internal nodes have 2 children and all leaves are at the same level

  A degenerate tree: A tree that only has 1 children, think a linked list up down. absolutely unbalanced tree.

Binary Search Trees; Node based binary tree data structure that has the following structure
1.  The left tree contains only values that are lesser than the nodes key
2.  The right tree contains only values that are greater than the nodes key
3.  The left and right tree must be trees themselves.


Types of Tree Traversal / Recursion
rememeber
Recursion is functions that call themselves and keep opening stack spaces until the functions base case is met.

in order traversal:
  first print the left tree, then print the right tree
pre order traversal:
post order traversal:


Deletion Method

1) Node to be deleted is the leaf: Simply remove from the tree.
2) Node to be deleted has only one child: copy the child to the node and delete the nodes
3) Node to be deleted has two children:
Find the inorder successor of the node.
Copy the contents of the successor to the node
and delete the inorder successor
Note that inorder predecessor can also be used 
